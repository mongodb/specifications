# This test requires libmongocrypt 1.5.0-alpha2.
runOn:
  # Require server version 6.0.0 to get behavior added in SERVER-64911.
  - minServerVersion: "6.0.0"

database_name: &database_name "default"
collection_name: &collection_name "default"
data: []
tests:
  - description: "create with a validator on an unencrypted field is OK"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
        schemaMap:
          "default.encryptedCollection": {{schema('basic')}}
    operations:
    # Drop to remove a collection that may exist from previous test runs.
    - name: dropCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: createCollection
      object: database
      arguments:
        collection: "encryptedCollection"
        validator:
          unencrypted_string: "foo"
    - name: assertCollectionExists
      object: testRunner
      arguments:
        database: *database_name
        collection: "encryptedCollection"
  - description: "create with a validator on an encrypted field is an error"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
        schemaMap:
          "default.encryptedCollection": {{schema('basic')}}
    operations:
    # Drop to remove a collection that may exist from previous test runs.
    - name: dropCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: createCollection
      object: database
      arguments:
        collection: "encryptedCollection"
        validator:
          encrypted_string: "foo"
      result:
        errorContains: "Comparison to encrypted fields not supported"
  - description: "collMod with a validator on an unencrypted field is OK"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
        schemaMap:
          "default.encryptedCollection": {{schema('basic')}}
    operations:
    # Drop to remove a collection that may exist from previous test runs.
    - name: dropCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: createCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: runCommand
      object: database
      arguments:
        command:
          collMod: "encryptedCollection"
          validator:
            unencrypted_string: "foo"
  - description: "collMod with a validator on an encrypted field is an error"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
        schemaMap:
          "default.encryptedCollection": {{schema('basic')}}
    operations:
    # Drop to remove a collection that may exist from previous test runs.
    - name: dropCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: createCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: runCommand
      object: database
      arguments:
        command:
          collMod: "encryptedCollection"
          validator:
            encrypted_string: "foo"
      result:
        errorContains: "Comparison to encrypted fields not supported"
  - description: "createIndexes with a partialFilterExpression on an unencrypted field is OK"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
        schemaMap:
          "default.encryptedCollection": {{schema('basic')}}
    operations:
    # Drop to remove a collection that may exist from previous test runs.
    - name: dropCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: createCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: runCommand
      object: database
      arguments:
        command:
          createIndexes: "encryptedCollection"
          indexes:
            - name: "name"
              key: { name: 1 }
              partialFilterExpression:
                unencrypted_string: "foo"
    - name: assertIndexExists
      object: testRunner
      arguments:
        database: *database_name
        collection: "encryptedCollection"
        index: name
  - description: "createIndexes with a partialFilterExpression on an encrypted field is an error"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
        schemaMap:
          "default.encryptedCollection": {{schema('basic')}}
    operations:
    # Drop to remove a collection that may exist from previous test runs.
    - name: dropCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: createCollection
      object: database
      arguments:
        collection: "encryptedCollection"
    - name: runCommand
      object: database
      arguments:
        command:
          createIndexes: "encryptedCollection"
          indexes:
            - name: "name"
              key: { name: 1 }
              partialFilterExpression:
                encrypted_string: "foo"
      result:
        errorContains: "Comparison to encrypted fields not supported"