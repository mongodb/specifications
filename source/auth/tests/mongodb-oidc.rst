============
MongoDB OIDC
============

Drivers MUST test the following scenarios:

- ``Callback-Driven Auth``
- ``AWS Device Auth``
- ``Invalid Configuration``
- ``Caching``
- ``Speculative Authentication``
- ``Reauthentication``


.. sectnum::

Drivers MUST be able to authenticate using either authentication or device
type if there are multiple principals configured on the server.  Note that
``directConnection=true`` and ``readPreference=secondaryPreferred`` are needed because the server is a secondary on a replica set, on port ``27018``.


Callback-Driven Auth
====================

Drivers MUST be able to authenticate using OIDC callback(s) when there
is one principal configured.

Single Principal Implicit Username
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Create a request callback that reads in the generated ``test_user1`` token
file.
- Create a client with a url of the form  ``mongodb://localhost/?authMechanism=MONGODB-OIDC`` and the OIDC request callback.
- Perform a ``find`` operation. that succeeds.
- Clear the cache.
- Close the client.

Single Principal Explicit Username
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Create a request callback that reads in the generated ``test_user1`` token
file.
- Create a client with a url of the form  ``mongodb://test_user1@localhost/?authMechanism=MONGODB-OIDC`` and the OIDC request callback.
- Perform a ``find`` operation that succeeds.
- Clear the cache.
- Close the client.

Multiple Principal User 1
~~~~~~~~~~~~~~~~~~~~~~~~~
- Create a request callback that reads in the generated ``test_user1`` token
file.
- Create a client with a url of the form  ``mongodb://test_user1@localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and the OIDC request callback.
- Perform a ``find`` operation that succeeds.
- Clear the cache.
- Close the client.

Multiple Principal User 2
~~~~~~~~~~~~~~~~~~~~~~~~~
- Create a request callback that reads in the generated ``test_user2`` token
file.
- Create a client with a url of the form  ``mongodb://test_user2@localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and the OIDC request callback.
- Perform a ``find`` operation that succeeds.
- Clear the cache.
- Close the client.

Multiple Principal No User
~~~~~~~~~~~~~~~~~~~~~~~~~~
- Create a client with a url of the form  ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and the OIDC request callback.
- Assert that a ``find`` operation fails.
- Close the client.

AWS Automatic Auth
==================

Drivers MUST be able to authenticate using the "aws" provider workflow
simulating an EC2 instance with an enabled web identity token provider,
generated by Drivers Evergreen Tools.

Single Principal
~~~~~~~~~~~~~~~~
- Set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable to the location
of the ``test_user1`` generated token file.
- Perform a ``find`` operation that succeeds.
- Close the client.

Multiple Principal User 1
~~~~~~~~~~~~~~~~~~~~~~~~~
- Set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable to the location
of the ``test_user1`` generated token file.
- Create a client with a url of the form ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws&directConnection=true&readPreference=secondaryPreferred``.
- Perform a ``find`` operation that succeeds.
- Close the client.

Multiple Principal User 2
~~~~~~~~~~~~~~~~~~~~~~~~~
- Set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable to the location
of the ``test_user2`` generated token file.
- Create a client with a url of the form ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws&directConnection=true&readPreference=secondaryPreferred``.
- Perform a ``find`` operation that succeeds.
- Close the client.

Invalid Callbacks
=================

Ensure the of the following conditions raise an error on a ``find`` operation:

- Request callback returns null
- Refresh callback returns null
- Request callback returns unexpected result
- Refresh callback returns unexpected result

Cached Credentials
==================

Drivers MUST ensure that they are testing the ability to cache credentials.
Drivers will need to be able to query and override the cached credentials to
verify usage.  Unless otherwise specified, the tests MUST be performed with
the authorization code workflow with and without a provided refresh callback.
If desired, the caching tests can be done using mock server responses.

Cache with refresh
~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a new client with a request callback and a refresh callback.  Both callbacks will read the contents of the ``AWS_WEB_IDENTITY_TOKEN_FILE`` location to obtain a valid access token.
- Validate the request callback inputs, including the timeout parameter if
possible.
- Give a callback response with a valid accessToken and an expiresInSeconds
that is within one minute.
- Ensure that a ``find`` operation adds credentials to the cache.
- Create a new client with the same request callback and a refresh callback.
- Ensure that a ``find`` operation results in a call to the refresh callback.
- Validate the refresh callback inputs, including the timeout parameter if
possible.
- Close the client.

Cache with no refresh
~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Ensure there is a cache with credentials that will expire in less than 5 minutes, using a client with an appropriate request callback.
- Create a new client with the a request callback but no refresh callback.
- Ensure that a ``find`` operation results in a call to the request callback.
- Close the client.

Cache key includes callback
~~~~~~~~~~~~~~~~~~~~~~~~~~~
If the driver does not support using callback hashes as part of the cache key,
skip this test.

- Clear the cache.
- Ensure there is a cache with credentials that will expire in less than 5 minutes, using a client with an appropriate request callback.
- Create a new client with a different request callback.
- Ensure that a ``find`` operation adds a new entry to the cache.
- Close the client.

Error clears cache
~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a new client with a valid request callback that gives credentials that expire within 5 minutes and a refresh callback that gives invalid
credentials.
# Ensure that a ``find`` operation adds a new entry to the cache.
- Ensure that a subsequent ``find`` operation results in an error.
- Ensure that the cache has been cleared.
- Close the client.

AWS Automatic workflow does not use cache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a new client using the AWS automatic workflow.
- Ensure that a ``find`` operation does not add credentials to the cache.
- Close the client.

Speculative Authentication
==========================
We can only test the successful case, by verifying that ``saslStart``
is not called.

- Clear the cache.
- Create a client with a request callback that returns a valid token
  that will not expire soon.
- Set a fail point for ``saslStart`` commands of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 2
      },
      "data": {
        "failCommands": [
          "saslStart"
        ],
        "errorCode": 18
      }
    }

.. note::

  The driver MUST either use a unique ``appName`` or explicitly
  remove the ``failCommand`` after the test to prevent leakage.

- Perform a ``find`` operation that succeeds.
- Close the client.
- Create a new client with the same properties without clearing the cache.
- Set a fail point for ``saslStart`` commands.
- Perform a ``find`` operation that succeeds.
- Close the client.

Reauthentication
================

The driver MUST test reauthentication with MONGODB-OIDC for a read
operation.

Succeeds
~~~~~~~~
- Clear the cache.
- Create request and refresh callbacks that return valid credentials
that will not expire soon.
- Create a client with the callbacks and an event listener capable
of listening for SASL commands.
- Perform a ``find`` operation that succeeds.
- Assert that the refresh callback has not been called.
- Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 1
      },
      "data": {
        "failCommands": [
          "find"
        ],
        "errorCode": 391
      }
    }

.. note::

  the driver MUST either use a unique ``appName`` or explicitly
  remove the ``failCommand`` after the test to prevent leakage.

- Perform another find operation that succeeds.
- Assert that the refresh callback has been called, if possible.
- Assert that the ordering of command started events is `find`, `saslStart` , `find`.
- Assert that the ordering of command succeeded events is `saslStart`, `find`.
- Assert that a ``find`` operation failed once during the command execution.
- Close the client.

Retries and Succeeds with Cache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request and refresh callbacks that return valid credentials
   that will not expire soon.
- Perform a ``find`` operation that succeeds.
- Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 2
      },
      "data": {
        "failCommands": [
          "find", "saslStart"
        ],
        "errorCode": 391
      }
    }

- Perform a ``find`` operation that succeeds.
- Close the client.

Retries and Fails with no Cache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request and refresh callbacks that return valid credentials
  that will not expire soon.
- Perform a ``find`` operation that succeeds (to force a speculative auth).
- Clear the cache.
- Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 2
      },
      "data": {
        "failCommands": [
          "find", "saslStart"
        ],
        "errorCode": 391
      }
    }

- Perform a ``find`` operation that fails.
- Close the client.