============
MongoDB OIDC
============

Drivers MUST test the following scenarios:

#. ``Callback-Driven Auth``
#. ``AWS Device Auth``
#. ``Multiple Principals``
#. ``Invalid Configuration``
#. ``Caching``
#. ``Reauthentication``


.. sectnum::


Callback-Driven Auth
====================

Drivers MUST be able to authenticate using OIDC callback(s) when there
is one principal configured.

#. Create a request callback that reads in the generated ``test_user1`` token
file.
#. Create a client with a url of the form  ``mongodb://localhost/?authMechanism=MONGODB-OIDC`` and the OIDC request callback.
#. Perform a ``find`` operation.
#. Clear the cache.

#. Create a request callback that reads in the generated ``test_user1`` token
file.
#. Create a client with a url of the form  ``mongodb://test_user1@localhost/?authMechanism=MONGODB-OIDC`` and the OIDC request callback.
#. Perform a ``find`` operation.
#. Clear the cache.


AWS Device Auth
===============

Drivers MUST be able to authenticate using the "aws" device workflow simulating
an EC2 instance with an enabled web identity token provider, generated by
Drivers Evergreen Tools.

#. Set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable to the location
of the ``test_user1`` generated token file.
#. Create a client with the url parameters ``?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws``.
#. Perform a find operation on the client.


Multiple Principals
===================

Drivers MUST be able to authenticate using either authentication or device
type if there are multiple principals configured on the server.  Note that
``directConnection=true`` and ``readPreference=secondaryPreferred`` are needed because the server is a secondary on a replica set, on port ``27018``.

#. Create a request callback that reads in the generated ``test_user1`` token
file.
#. Create a client with a url of the form  ``mongodb://test_user1@localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and the OIDC request callback.
#. Perform a ``find`` operation.
#. Clear the cache.

#. Create a request callback that reads in the generated ``test_user2`` token
file.
#. Create a client with a url of the form  ``mongodb://test_user2@localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and the OIDC request callback.
#. Perform a ``find`` operation.
#. Clear the cache.

#. Set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable to the location
of the ``test_user1`` generated token file.
#. Create a client with a url of the form ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws&directConnection=true&readPreference=secondaryPreferred``.
#. Perform a ``find`` operation.

#. Set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable to the location
of the ``test_user2`` generated token file.
#. Create a client with a url of the form ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws&directConnection=true&readPreference=secondaryPreferred``.
#. Perform a ``find`` operation.

#. Create a client with a url of the form  ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and the OIDC request callback.
#. Assert that a ``find`` operation fails.


Invalid Callbacks
=================

Ensure the of the following conditions raise an error:

#. Any callback returns null
#. Any callback returns unexpected result

Cached Credentials
==================

Drivers MUST ensure that they are testing the ability to cache credentials.
Drivers will need to be able to query and override the cached credentials to
verify usage.  Unless otherwise specified, the tests MUST be performed with
the authorization code workflow with and without a provided refresh callback.
If desired, the caching tests can be done using mock server responses.

#. Clear the cache.
#. Create a new client with a request callback and a refresh callback.  Both callbacks will read the contents of the ``AWS_WEB_IDENTITY_TOKEN_FILE`` location to obtain a valid access token.
#. Validate the request callback inputs, including the timeout parameter if
possible.
#. Give a callback response with a valid accessToken and an expiresInSeconds
that is within one minute.
#. Ensure that a ``find`` operation adds credentials to the cache.
#. Create a new client with the same request callback and a refresh callback.
#. Ensure that a ``find`` operation results in a call to the refresh callback.
#. Validate the refresh callback inputs, including the timeout parameter if
possible.

#. Ensure there is a cache with credentials that will expire in less than 5 minutes, using a client with an appropriate request callback.
#. Create a new client with the a request callback but no refresh callback.
#. Ensure that a ``find`` operation results in a call to the request callback.

If the driver does not supports using callback hashes as part of the cache key,
skip the next test.

# Create a new client with a different request callback.
# Ensure that a ``find`` operation adds a new entry to the cache.

#. Clear the cache.
#. Create a new client with a valid request callback that gives credentials that expire within 5 minutes and a refresh callback that gives invalid
credentials.
# Ensure that a ``find`` operation adds a new entry to the cache.
#. Ensure that a subsequent ``find`` operation results in an error.
#. Ensure that the cache has been cleared.

#. Clear the cache.
#. Create a new client using the AWS device workflow.
#. Ensure that a ``find`` operation does not add credentials to the cache.

Reauthentication
================

The driver MUST test reauthentication with MONGODB-OIDC for a read
operation.

#. Clear the cache
#. Create request and refresh callbacks that return valid credentials
that will not expire soon.
#. Create a client with the callbacks and an event listener capable
of listening for SASL commands.
#. Perform a find operation.
#. Assert that the refresh callback has not been called.
#. Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 1
      },
      "data": {
        "failCommands": [
          "find"
        ],
        "errorCode": 391
      }
    }

#. Perform another find operation.
#. Assert that the refresh callback has been called, if possible.
#. Assert that a ``find`` operation was started twice and a ``saslStart`` operation was started once during the command execution.
#. Assert that a ``find`` operation succeeeded once and the ``saslStart`` operation succeeded during the command execution.
#. Assert that a ``find`` operation failed once during the command execution.
