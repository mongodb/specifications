============
MongoDB OIDC
============

Drivers MUST test the following scenarios:

#. ``Authorization Code Flow``
#. ``AWS Device Flow``
#. ``Multiple Principals``
#. ``Invalid Configuration``
#. ``Caching``
#. ``Reauthentication``


.. sectnum::

Authorization Code Flow
=======================

Drivers MUST be able to authenticate using OIDC callback(s) when there
is one principal configured.

An example of a valid URI would be:

.. code-block::

  mongodb://localhost/?authMechanism=MONGODB-OIDC

The following URI would also be valid, if it matches the single principal name:

.. code-block::

  mongodb://test_user1@localhost/?authMechanism=MONGODB-OIDC

For the prose test, the ``test_user1`` generated token from Drivers Evergreen Tools in the callback response.


AWS Device Flow
===============

Drivers MUST be able to authenticate using the "aws" device workflow simulating
an EC2 instance with an enabled web identity token provider, generated by
Drivers Evergreen Tools.

.. code-block::

  mongodb://localhost/?authMechanism=MONGODB-OIDC&authMechanismProperties=DEVICE_NAME=aws

For this prose test, set ``AWS_WEB_IDENTITY_TOKEN_FILE`` to the ``test_user1``
generated token file.


Multiple Principals
===================

Drivers MUST be able to authenticate using either authentication or device
type if there are multiple principals configured on the server.  Note that
``directConnection=true`` is needed because the servers are part of a replica
set.

.. code-block::

  mongodb://test_user1@localhost:20178/?authMechanism=MONGODB-OIDC&directConnection=true

  mongodb://test_user2@localhost:20178/?authMechanism=MONGODB-OIDCauthMechanismProperties&directConnection=true

  mongodb://localhost:20178/?authMechanism=MONGODB-OIDC&authMechanismProperties=DEVICE_NAME:aws&directConnection=true

For this prose test, set ``AWS_WEB_IDENTITY_TOKEN_FILE`` to the ``test_user2``
generated token file.  Use the appropriate generated tokens for the callbacks
for ``test_user1`` and ``test_user2``.


Invalid Callbacks
=================

Ensure the of the following conditions raise an error:

#. Any callback returns null
#. Any callback returns unexpected result

Cached Credentials
==================

Drivers MUST ensure that they are testing the ability to cache credentials.
Drivers will need to be able to query and override the cached credentials to
verify usage.  Unless otherwise specified, the tests MUST be performed with
the authorization code workflow with and without a provided refresh callback.
If desired, the caching tests can be done using mock server responses.

#. Clear the cache.
#. Create a new client with a request callback and a refresh callback.  Both callbacks will read the contents of the ``AWS_WEB_IDENTITY_TOKEN_FILE`` location to obtain a valid access token.
#. Validate the request callback inputs, including the timeout parameter if
possible.
#. Give a callback response with a valid accessToken and an expiresInSeconds
that is within one minute.
#. Ensure that a ``find`` operation adds credentials to the cache.
#. Create a new client with the same request callback and a refresh callback.
#. Ensure that a ``find`` operation results in a call to the refresh callback.
#. Validate the request callback inputs, including the timeout parameter if
possible.

#. Ensure there is a cache with soon-to-be-expired credentials.
#. Create a new client with the a request callback but no refresh callback.
#. Ensure that a ``find`` operation results in a call to the request callback.

#. Ensure there is a cache with soon-to-be-expired credentials.
#. Create a new client with a refresh callback that gives invalid credentials.
#. Ensure that a ``find`` operation results in an error.
#. Ensure that the cache has been cleared.

#. Clear the cache.
#. Create a new client using the AWS device workflow.
#. Ensure that a ``find`` operation does not add credentials to the cache.

Reauthentication
================

The driver MUST test reauthentication with MONGODB-OIDC for both read
and write operations.

#. Clear the cache
#. Create request and refresh callbacks that return valid credentials
that will not expire soon.
#. Create a client with the callbacks and an event listener capable
of listening for SASL commands.
#. Perform a find operation.
#. Assert that the refresh callback has not been called.
#. Force a reauthenication using a ``failCommand`` of the form::

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 1
      },
      "data": {
        "failCommands": [
          "find"
        ],
        "errorCode": 391
      }
    }

#. Perform another find operation.
#. Assert that the refresh callback has been called, if possible.
#. Assert that a ``find`` operation was started twice and a ``saslStart`` operation was started once during the command execution.
#. Assert that a ``find`` operation succeeeded once and the ``saslStart`` operation succeeded during the command execution.
#. Assert that a ``find`` operation failed once during the command execution.


#. Clear the cache
#. Create request and refresh callbacks that return valid credentials
that will not expire soon.
#. Create a client with the callbacks and an event listener capable
of listening for SASL commands.
#. Perform a find operation.
#. Assert that the refresh callback has not been called.
#. Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 1
      },
      "data": {
        "failCommands": [
          "insert"
        ],
        "errorCode": 391
      }
    }

#. Perform an insert operation.
#. Assert that the refresh callback has been called, if possible.
#. Assert that a ``insert`` operation was started twice and a ``saslStart`` operation was started once  during the command execution
#. Assert that a ``inser`` operation succeeeded once and the ``saslStart`` operation succeeded  during the command execution
#. Assert that a ``insert`` operation failed once during the command execution.
