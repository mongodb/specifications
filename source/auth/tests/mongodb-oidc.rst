============
MongoDB OIDC
============

Drivers MUST test the following scenarios:

- ``Callback-Driven Auth``
- ``AWS Automatic Auth``
- ``Callback Validation``
- ``Cached Credentials``
- ``Speculative Authentication``
- ``Reauthentication``


.. sectnum::

Drivers MUST be able to authenticate using either authentication or provider
name if there are multiple principals configured on the server.  Note that
``directConnection=true`` and ``readPreference=secondaryPreferred`` are needed because the server is a secondary on a replica set, on port ``27018``.

Drivers will need to be able to internally query and clear the cached
credentials to verify usage for testing purposes.  Clearing the cache
means removing all data from the cache, including ``OIDCMechanismServerStep1``
information.

Drivers MUST set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable
to the location of valid ``test_user1`` credentials at the beginning of each
test, unless otherwise specified.

Unless otherwise specified, tests will use a URL
of the form ``mongodb://localhost/?authMechanism=MONGODB-OIDC``.


Callback-Driven Auth
====================

Drivers MUST be able to authenticate using OIDC callback(s) when there
is one principal configured.

Single Principal Implicit Username
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a request callback returns a valid token.
- Create a client that uses the default OIDC url and the request callback.
- Perform a ``find`` operation. that succeeds.
- Close the client.

Single Principal Explicit Username
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a request callback that returns a valid token.
- Create a client with a url of the form  ``mongodb://test_user1@localhost/?authMechanism=MONGODB-OIDC`` and the OIDC request callback.
- Perform a ``find`` operation that succeeds.
- Close the client.

Multiple Principal User 1
~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a request callback that returns a valid token.
- Create a client with a url of the form  ``mongodb://test_user1@localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and a valid OIDC request callback.
- Perform a ``find`` operation that succeeds.
- Close the client.

Multiple Principal User 2
~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a request callback that reads in the generated ``test_user2`` token file.
- Create a client with a url of the form ``mongodb://test_user2@localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and a valid OIDC request callback.
- Perform a ``find`` operation that succeeds.
- Close the client.

Multiple Principal No User
~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a client with a url of the form ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&directConnection=true&readPreference=secondaryPreferred`` and a valid OIDC request callback.
- Assert that a ``find`` operation fails.
- Close the client.

Allowed Hosts Blocked
~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a client that uses the OIDC url and a request callback, and an
  ``ALLOWED_HOSTS`` that is an empty list.
- Assert that a ``find`` operation fails with a client-side error.
- Close the client.
- Create a client that uses the url ``mongodb://localhost/?authMechanism=MONGODB-OIDC&ignored=example.com`` a request callback, and an
  ``ALLOWED_HOSTS`` that contains ["example.com"].
- Assert that a ``find`` operation fails with a client-side error.
- Close the client.

Lock Avoids Extra Callback Calls
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Clear the cache.
- Create a request callback that returns a token that will expire soon, and
  a refresh callback.  Ensure that the request callback has a time delay, and
  that we can record the number of times each callback is called.
- Spawn two threads or async operations that do the following:
  - Create a client with the callbacks.
  - Run a find operation that succeeds.
  - Close the client.
  - Create a new client with the callbacks.
  - Run a find operation that succeeds.
  - Close the client.
- Join the two threads or simultaneously call the async operations
- Ensure that the request callback has been called once, and the refresh
  callback has been called twice, or that no async function has been
  entered simultaneously.

AWS Automatic Auth
==================

Drivers MUST be able to authenticate using the "aws" provider workflow
simulating an EC2 instance with an enabled web identity token provider,
generated by Drivers Evergreen Tools.

Single Principal
~~~~~~~~~~~~~~~~
- Create a client with a url of the form ``mongodb://localhost/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws``.
- Perform a ``find`` operation that succeeds.
- Close the client.

Multiple Principal User 1
~~~~~~~~~~~~~~~~~~~~~~~~~
- Create a client with a url of the form ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws&directConnection=true&readPreference=secondaryPreferred``.
- Perform a ``find`` operation that succeeds.
- Close the client.

Multiple Principal User 2
~~~~~~~~~~~~~~~~~~~~~~~~~
- Set the ``AWS_WEB_IDENTITY_TOKEN_FILE`` environment variable
  to the location of valid ``test_user2`` credentials.
- Create a client with a url of the form ``mongodb://localhost:27018/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws&directConnection=true&readPreference=secondaryPreferred``.
- Perform a ``find`` operation that succeeds.
- Close the client.

Allowed Hosts Ignored
~~~~~~~~~~~~~~~~~~~~~
- Create a client with a url of the form ``mongodb://localhost/?authMechanism=MONGODB-OIDC&authMechanismProperties=PROVIDER_NAME:aws``, and an
  ``ALLOWED_HOSTS`` that is an empty list.
- Assert that a ``find`` operation succeeds.
- Close the client.

Callback Validation
===================

Valid Callbacks
~~~~~~~~~~~~~~~
- Clear the cache.
- Create request and refresh callback that validate their inputs and return
  a valid token.  The request callback must return a token that expires in
  one minute.
- Create a client that uses the above callbacks.
- Perform a ``find`` operation that succeeds.  Verify that the request
  callback was called with the appropriate inputs, including the timeout
  parameter if possible.  Ensure that there are no unexpected fields.
- Close the client.
- Create a new client with the same configuration.
- Perform a ``find`` operation that succeeds.  Verify that the refresh
  callback was called with the appropriate inputs, including the timeout
  parameter if possible.
- Close the client.

Request Callback Returns Null
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a client with a request callback that returns ``null``.
- Perform a ``find`` operation that fails.
- Close the client.

Refresh Callback Returns Null
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request callback that returns a valid token that will expire in a
  minute, and a refresh callback that returns ``null``.
- Perform a ``find`` operation that succeeds.
- Close the client.
- Create a new client with the same configuration.
- Perform a ``find`` operation that fails.
- Close the client.

Request Callback Returns Invalid Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a client with a request callback that returns data not conforming to
  the ``OIDCRequestTokenResult`` with missing field(s).
- Perform a ``find`` operation that fails.
- Close the client.
- Create a client with a request callback that returns data not conforming to
  the ``OIDCRequestTokenResult`` with extra field(s).
- Perform a ``find`` operation that fails.
- Close the client.

Refresh Callback Returns Missing Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request callback that returns a valid token that will expire in a
  minute, and a refresh callback that returns data not conforming to
  the ``OIDCRequestTokenResult`` with missing field(s).
- Create a client with the callbacks.
- Perform a ``find`` operation that succeeds.
- Close the client.
- Create a new client with the same callbacks.
- Perform a ``find`` operation that fails.
- Close the client.

Refresh Callback Returns Extra Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request callback that returns a valid token that will expire in a
  minute, and a refresh callback that returns data not conforming to
  the ``OIDCRequestTokenResult`` with extra field(s).
- Create a client with the callbacks.
- Perform a ``find`` operation that succeeds.
- Close the client.
- Create a new client with the same callbacks.
- Perform a ``find`` operation that fails.
- Close the client.

Cached Credentials
==================

Drivers MUST ensure that they are testing the ability to cache credentials.
Unless otherwise specified, the tests MUST be performed with the callback-driven workflow with a provided request and refresh callback. If
desired, the caching tests MAY be done using mock server responses.
The following tests assume a global cache is in use.  If a different
cache scheme is in use, appropriate tests MUST be written to ensure that
the cache is performing as intended.

Cache with refresh
~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a new client with a request callback that gives credentials that
  expire in on minute.
- Ensure that a ``find`` operation adds credentials to the cache.
- Close the client.
- Create a new client with the same request callback and a refresh callback.
- Ensure that a ``find`` operation results in a call to the refresh callback.
- Close the client.

Cache with no refresh
~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a new client with a request callback that gives credentials that
  expire in one minute.
- Ensure that a ``find`` operation adds credentials to the cache.
- Close the client.
- Create a new client with the a request callback but no refresh callback.
- Ensure that a ``find`` operation results in a call to the request callback.
- Close the client.

Cache key includes callback
~~~~~~~~~~~~~~~~~~~~~~~~~~~
If the driver does not support using callback references or hashes as part of
the cache key, skip this test.  This test ensures that the callback is
considered as part of the cache key.

- Clear the cache.
- Create a new client with a request callback that does not give an
  ```expiresInSeconds``` value.
- Ensure that a ``find`` operation adds credentials to the cache.
- Close the client.
- Create a new client with a different request callback.
- Ensure that a ``find`` operation replaces the one-time use entry and adds a new entry to the cache.
- Close the client.

Error clears cache
~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a new client with a valid request callback that gives credentials
  that expire within 5 minutes and a refresh callback that gives invalid
  credentials.
- Ensure that a ``find`` operation adds a new entry to the cache.
- Close the client.
- Create a new client with the same parameters.
- Ensure that a subsequent ``find`` operation results in an error.
- Ensure that the cache value cleared.
- Close the client.

AWS Automatic workflow does not use cache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create a new client that uses the AWS automatic workflow.
- Ensure that a ``find`` operation does not add credentials to the cache.
- Close the client.

Speculative Authentication
==========================
We can only test the successful case, by verifying that ``saslStart``
is not called.

- Clear the cache.
- Create a client with a request callback that returns a valid token
  that will not expire soon.
- Set a fail point for ``saslStart`` commands of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 2
      },
      "data": {
        "failCommands": [
          "saslStart"
        ],
        "errorCode": 18
      }
    }

.. note::

  The driver MUST either use a unique ``appName`` or explicitly
  remove the ``failCommand`` after the test to prevent leakage.

- Perform a ``find`` operation that succeeds.
- Close the client.
- Create a new client with the same properties without clearing the cache.
- Set a fail point for ``saslStart`` commands.
- Perform a ``find`` operation that succeeds.
- Close the client.

Reauthentication
================

The driver MUST test reauthentication with MONGODB-OIDC for a read
operation.

Succeeds
~~~~~~~~
- Clear the cache.
- Create request and refresh callbacks that return valid credentials
  that will not expire soon.
- Create a client with the callbacks and an event listener.  The following
  assumes that the driver does not emit ``saslStart`` or ``saslContinue``
  events.  If the driver does emit those events, ignore/filter them for the
  purposes of this test.
- Perform a ``find`` operation that succeeds.
- Assert that the refresh callback has not been called.
- Clear the listener state if possible.
- Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 1
      },
      "data": {
        "failCommands": [
          "find"
        ],
        "errorCode": 391
      }
    }

.. note::

  the driver MUST either use a unique ``appName`` or explicitly
  remove the ``failCommand`` after the test to prevent leakage.

- Perform another find operation that succeeds.
- Assert that the refresh callback has been called once, if possible.
- Assert that the ordering of list started events is [``find``],
  , ``find``.  Note that if the listener stat could not be cleared then there
  will and be extra ``find`` command.
- Assert that the list of command succeeded events is [``find``].
- Assert that a ``find`` operation failed once during the command execution.
- Close the client.

Retries and Succeeds with Cache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request and refresh callbacks that return valid credentials
  that will not expire soon.
- Perform a ``find`` operation that succeeds.
- Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 2
      },
      "data": {
        "failCommands": [
          "find", "saslStart"
        ],
        "errorCode": 391
      }
    }

- Perform a ``find`` operation that succeeds.
- Close the client.

Retries and Fails with no Cache
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request and refresh callbacks that return valid credentials
  that will not expire soon.
- Perform a ``find`` operation that succeeds (to force a speculative auth).
- Clear the cache.
- Force a reauthenication using a ``failCommand`` of the form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 2
      },
      "data": {
        "failCommands": [
          "find", "saslStart"
        ],
        "errorCode": 391
      }
    }

- Perform a ``find`` operation that fails.
- Close the client.

Separate Connections Avoid Extra Callback Calls
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Clear the cache.
- Create request and refresh callbacks that return tokens that will not expire
  soon.  Ensure that we can record the number of times each callback is called.
- Create two clients using the callbacks
- Perform a find operation on each client that succeeds.
- Ensure that the request callback has been called once and the refresh
  callback has not been called.
- Force a reauthenication on the first client using a ``failCommand`` of the
  form:

.. code:: javascript

    {
      "configureFailPoint": "failCommand",
      "mode": {
        "times": 1
      },
      "data": {
        "failCommands": [
          "find"
        ],
        "errorCode": 391
      }
    }

- Perform a ``find`` operation that succeeds.
- Ensure that the request callback has been called once and the refresh
  callback has been called once.
- Repeat the ``failCommand`` and ``find`` operation on the second client.
- Ensure that the request callback has been called once and the refresh
  callback has been called once.
- Close both clients.
