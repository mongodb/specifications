---
description: cancel-server-check
schemaVersion: "1.9"
runOnRequirements:
  - minServerVersion: "4.0"
    topologies:
      - replicaset
  - minServerVersion: "4.2"
    topologies:
      - sharded
createEntities:
  - client:
      id: &setupClient setupClient
initialData: &initialData
  - collectionName: &collectionName cancel-server-check
    databaseName: &databaseName sdam-tests
    documents: []
tests:
  - description: Cancel server check
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                observeEvents:
                  - poolClearedEvent
                  - serverDescriptionChangedEvent
                uriOptions:
                  retryWrites: true
                  heartbeatFrequencyMS: 10000
                  serverSelectionTimeoutMS: 5000
                  appname: cancelServerCheckTest
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
      - name: insertOne
        object: *collection
        arguments:
          document:
            _id: 1
      - name: failPoint
        object: testRunner
        arguments:
          failPoint:
            configureFailPoint: failCommand
            mode:
              times: 1
            data:
              failCommands:
                - insert
              closeConnection: true
          client: *setupClient
      - name: insertOne
        object: *collection
        arguments:
          document:
            _id: 2
        expectResult:
          insertedId: 2
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: Unknown
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            poolClearedEvent: {}
          count: 1
      - name: insertOne
        object: *collection
        arguments:
          document:
            _id: 3
        expectResult:
          insertedId: 3
      - name: assertEventCount
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: Unknown
          count: 1
      - name: assertEventCount
        object: testRunner
        arguments:
          client: *client
          event:
            poolClearedEvent: {}
          count: 1
    outcome:
      - collectionName: *collectionName
        databaseName: *databaseName
        documents:
          - _id: 1
          - _id: 2
          - _id: 3
