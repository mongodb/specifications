description: "find-shutdown-error"

schemaVersion: "1.0"

runOnRequirements:
  # failCommand appName requirements
  - minServerVersion: "4.4"

createEntities:
  - client:
      id: &client0 client0
      observeEvents: [ commandStartedEvent, serverDescriptionChangedEvent ]
      uriOptions:
        retryWrites: false
        retryReads: false
        heartbeatFrequencyMS: 500
        appName: &appName shutdownErrorFindTest
  - database:
      id: &database0 database0
      client: *client0
      databaseName: &database0Name sdam-tests
  - collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection0Name find-shutdown-error
  - thread:
      id: &thread0 thread0
  - thread:
      id: &thread1 thread1

initialData:
  - collectionName: *collection0Name
    databaseName: *database0Name
    documents: []

tests:
  - description: Concurrent shutdown error on find
    operations:
      # Perform an operation to ensure the node is discovered.
      - name: insertOne
        object: *collection0
        arguments:
          document:
            _id: 1
      # Configure the next two finds to fail with a non-timeout shutdown
      # errors. Block the connection for 500ms to ensure both operations check
      # out connections from the same pool generation.
      - name: failPoint
        object: testRunner
        arguments:
          client: *client0
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 2 }
            data:
                failCommands: ["find"]
                appName: *appName
                errorCode: 91
                blockConnection: true
                blockTimeMS: 500
      # Perform concurrent find operations. Both fail with shutdown errors.
      - name: runOnThread
        object: testRunner
        arguments:
          thread: *thread0
          operation:
            name: find
            object: *collection0
            arguments:
              filter:
                _id: 1
            expectError: { isError: true }
      - name: runOnThread
        object: testRunner
        arguments:
          thread: *thread1
          operation:
            name: find
            object: *collection0
            arguments:
              filter:
                _id: 1
            expectError: { isError: true }
      # Stop threads.
      - name: waitForThread
        object: testRunner
        arguments:
          thread: *thread0
      - name: waitForThread
        object: testRunner
        arguments:
          thread: *thread1
      # The first shutdown error should mark the server Unknown and then clear
      # the pool.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client0
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: Unknown
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client0
          event:
            poolClearedEvent: { }
          count: 1
      # Perform an operation to ensure the node is rediscovered.
      - name: insertOne
        object: *collection0
        arguments:
          document:
            _id: 4
      # Assert the server was marked Unknown and pool was cleared exactly once.
      - name: assertEventCount
        object: testRunner
        arguments:
          client: *client0
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: Unknown
          count: 1
      - name: assertEventCount
        object: testRunner
        arguments:
          client: *client0
          event:
            poolClearedEvent: { }
          count: 1

    # Order of operations is non-deterministic so we cannot check events.
    outcome:
      - collectionName: *collection0Name
        databaseName: *database0Name
        documents:
          - { _id: 1 }
          - { _id: 4 }
