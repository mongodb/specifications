description: connection establishment if loadBalanced is specified for non-load balanced clusters

schemaVersion: '1.3'

createEntities:
  - client:
      id: &lbTrueClient lbTrueClient
      uriOptions:
        loadBalanced: true
  - database:
      id: &lbTrueDatabase lbTrueDatabase
      client: *lbTrueClient
      databaseName: &lbTrueDatabaseName lbTrueDb
  - client:
      id: &lbFalseClient lbFalseClient
      uriOptions:
        loadBalanced: false
  - database:
      id: &lbFalseDatabase lbFalseDatabase
      client: *lbFalseClient
      databaseName: &lbFalseDatabaseName lbFalseDb

_yamlAnchors:
  runCommandArguments:
    - &pingArguments
      arguments:
        commandName: ping
        command: { ping: 1 }

tests:
  # These tests assert that drivers behave correctly if loadBalanced=true/false for non-load balanced clusters. Existing
  # spec tests should cover the case where loadBalanced is unset.

  # If the server is not configured to be behind a load balancer and the URI contains loadBalanced=true, the driver
  # should error during the connection handshake because the server's hello response does not contain a serverId field.
  - description: operations against non-load balanced clusters fail if URI contains loadBalanced=true
    runOnRequirements:
      - loadBalanced: false
    operations:
      - name: runCommand
        object: *lbTrueDatabase
        <<: *pingArguments
        expectError:
          errorContains: Driver attempted to initialize in load balancing mode, but the server does not support this mode

  - description: operations against non-load balanced clusters succeed if URI contains loadBalanced=false
    runOnRequirements:
      - loadBalanced: false
    operations:
      - name: runCommand
        object: *lbFalseDatabase
        <<: *pingArguments
