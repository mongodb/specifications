description: createKey-provider-gcp

schemaVersion: "1.8"

runOnRequirements:
  - csfle: true

createEntities:
  - client:
      id: &client0 client0
      observeEvents:
        - commandStartedEvent
        - commandSucceededEvent
        - commandFailedEvent
  - clientEncryption:
      id: &clientEncryption0 clientEncryption0
      clientEncryptionOpts:
        keyVaultClient: *client0
        keyVaultNamespace: keyvault.datakeys
        kmsProviders:
          gcp:
            email: { $$placeholder: 1 }
            privateKey: { $$placeholder: 1 }
  - database:
      id: &database0 database0
      client: *client0
      databaseName: &database0Name keyvault
  - collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection0Name datakeys

initialData:
  - databaseName: *database0Name
    collectionName: *collection0Name
    documents: []

tests:
  - description: create datakey with GCP KMS provider
    operations:
      - name: createKey
        object: *clientEncryption0
        arguments:
          kmsProvider: gcp
          opts:
            masterKey:
              projectId: devprod-drivers
              location: global
              keyRing: key-ring-csfle
              keyName: key-name-csfle
        expectResult:
          id: { $$type: binData }
    expectEvents:
      - client: *client0
        events:
          - commandStartedEvent:
              commandName: insert
              databaseName: *database0Name
              command:
                insert: *collection0Name
                documents:
                  - masterKey:
                      provider: gcp
                      projectId: devprod-drivers
                      location: global
                      keyRing: key-ring-csfle
                      keyName: key-name-csfle
                writeConcern: { w: "majority" }
          - commandSucceededEvent:
              commandName: insert
              reply:
                ok: 1
                n: 1
