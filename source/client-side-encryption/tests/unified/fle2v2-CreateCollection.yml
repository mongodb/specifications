description: fle2v2-CreateCollection
schemaVersion: '1.23'
runOnRequirements:
  - minServerVersion: "7.0.0"
    # Skip QEv2 (also referred to as FLE2v2) tests on Serverless. Unskip once Serverless enables the QEv2 protocol.
    # FLE 2 Encrypted collections are not supported on standalone.
    topologies: ["replicaset", "sharded", "load-balanced"]
createEntities:
  - client:
      id: "client0"
      autoEncryptOpts:
        kmsProviders:
          aws: { accessKeyId: { $$placeholder: 1 }, secretAccessKey: { $$placeholder: 1 }, sessionToken: { $$placeholder: 1 } }
        encryptedFieldsMap:
          default.encryptedCollection: &encrypted_fields {"fields": [{"path": "firstName",
                  "bsonType": "string", "keyId": {"$binary": {"subType": "04", "base64": "AAAAAAAAAAAAAAAAAAAAAA=="}}}]}
      observeEvents:
        - commandStartedEvent
  - database:
      id: "db"
      client: "client0"
      databaseName: default
  - collection:
      id: "coll"
      database: "db"
      collectionName: default
tests:
  - description: "state collections and index are created"

    operations:
      # Do an initial drop to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: &encrypted_collection_name "encryptedCollection"
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: &database_name "default"
          collection: &esc_collection_name "enxcol_.encryptedCollection.esc"
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: &ecc_collection_name "enxcol_.encryptedCollection.ecc"
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: &ecoc_collection_name "enxcol_.encryptedCollection.ecoc"
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1

    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
        # events from createCollection ... begin
        # State collections are created first.
          - commandStartedEvent:
              command:
                create: *esc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *ecoc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
        # Data collection is created after.
          - commandStartedEvent:
              command:
                create: *encrypted_collection_name
                encryptedFields: &encrypted_fields_expectation {"fields": [{"path": "firstName",
                        "bsonType": "string", "keyId": {"$binary": {"subType": "04",
                            "base64": "AAAAAAAAAAAAAAAAAAAAAA=="}}}]}
              database_name: *database_name
              commandName: create
        # Index on __safeContents__ is then created.
          - commandStartedEvent:
              command:
                createIndexes: *encrypted_collection_name
                indexes:
                  - name: __safeContent___1
                    key: {__safeContent__: 1}
              database_name: *database_name
              commandName: createIndexes
        # events from createCollection ... end
  - description: "default state collection names are applied"

    operations:
      # Do an initial drop to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1

    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
        # events from createCollection ... begin
        # State collections are created first.
          - commandStartedEvent:
              command:
                create: *esc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *ecoc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
        # Data collection is created after.
          - commandStartedEvent:
              command:
                create: *encrypted_collection_name
                encryptedFields: *encrypted_fields_expectation
              database_name: *database_name
              commandName: create
        # Index on __safeContents__ is then created.
          - commandStartedEvent:
              command:
                createIndexes: *encrypted_collection_name
                indexes:
                  - name: __safeContent___1
                    key: {__safeContent__: 1}
              database_name: *database_name
              commandName: createIndexes
        # events from createCollection ... end
  - description: "drop removes all state collections"

    operations:
      # Do an initial drop to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1

    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
        # events from createCollection ... begin
        # State collections are created first.
          - commandStartedEvent:
              command:
                create: *esc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *ecoc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
        # Data collection is created after.
          - commandStartedEvent:
              command:
                create: *encrypted_collection_name
                encryptedFields: *encrypted_fields
              database_name: *database_name
              commandName: create
        # Index on __safeContents__ is then created.
          - commandStartedEvent:
              command:
                createIndexes: *encrypted_collection_name
                indexes:
                  - name: __safeContent___1
                    key: {__safeContent__: 1}
              database_name: *database_name
              commandName: createIndexes
        # events from createCollection ... end
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
  - description: "CreateCollection without encryptedFields."
    operations:
      # Do an initial drop to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: "plaintextCollection"
      - name: createCollection
        object: "coll"
        arguments:
          collection: "plaintextCollection"
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: "plaintextCollection"

    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
        # expect listCollections to be sent on drop to check for remote encryptedFields.
          - commandStartedEvent:
              command:
                listCollections: 1
                filter: {name: "plaintextCollection"}
              database_name: *database_name
              commandName: listCollections
          - commandStartedEvent:
              command:
                drop: "plaintextCollection"
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
          - commandStartedEvent:
              command:
                create: "plaintextCollection"
              database_name: *database_name
              commandName: create
  - description: "CreateCollection from encryptedFieldsMap."
    operations:
      # Do an initial drop to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1

    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
        # events from createCollection ... begin
        # State collections are created first.
          - commandStartedEvent:
              command:
                create: *esc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *ecoc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
        # Data collection is created after.
          - commandStartedEvent:
              command:
                create: *encrypted_collection_name
                encryptedFields: *encrypted_fields_expectation
              database_name: *database_name
              commandName: create
        # Index on __safeContents__ is then created.
          - commandStartedEvent:
              command:
                createIndexes: *encrypted_collection_name
                indexes:
                  - name: __safeContent___1
                    key: {__safeContent__: 1}
              database_name: *database_name
              commandName: createIndexes
        # events from createCollection ... end
  - description: "CreateCollection from encryptedFields."
    operations:
      # Do initial drops to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
          encryptedFields: *encrypted_fields
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
          encryptedFields: *encrypted_fields
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1

    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
        # events from createCollection ... begin
        # State collections are created first.
          - commandStartedEvent:
              command:
                create: *esc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *ecoc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
        # Data collection is created after.
          - commandStartedEvent:
              command:
                create: *encrypted_collection_name
                encryptedFields: *encrypted_fields_expectation
              database_name: *database_name
              commandName: create
        # libmongocrypt requests listCollections to get a schema for the "createIndexes" command.
          - commandStartedEvent:
              command:
                listCollections: 1
                filter: {name: *encrypted_collection_name}
              database_name: *database_name
              commandName: listCollections
        # Index on __safeContents__ is then created.
          - commandStartedEvent:
              command:
                createIndexes: *encrypted_collection_name
                indexes:
                  - name: __safeContent___1
                    key: {__safeContent__: 1}
              database_name: *database_name
              commandName: createIndexes
        # events from createCollection ... end

  - description: "DropCollection from encryptedFieldsMap"
    operations:
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
  - description: "DropCollection from encryptedFields"
    operations:
      # Do initial drops to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
          encryptedFields: *encrypted_fields
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
          encryptedFields: *encrypted_fields
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
          encryptedFields: *encrypted_fields
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
        # events from createCollection ... begin
          - commandStartedEvent:
              command:
                create: *esc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *ecoc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *encrypted_collection_name
                encryptedFields: *encrypted_fields_expectation
              database_name: *database_name
              commandName: create
        # libmongocrypt requests listCollections to get a schema for the "createIndexes" command.
          - commandStartedEvent:
              command:
                listCollections: 1
                filter: {name: *encrypted_collection_name}
              database_name: *database_name
              commandName: listCollections
        # Index on __safeContents__ is then created.
          - commandStartedEvent:
              command:
                createIndexes: *encrypted_collection_name
                indexes:
                  - name: __safeContent___1
                    key: {__safeContent__: 1}
              database_name: *database_name
              commandName: createIndexes
        # events from createCollection ... end
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end

  - description: "DropCollection from remote encryptedFields"

    operations:
      # Do initial drops to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
          encryptedFields: *encrypted_fields
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
          encryptedFields: *encrypted_fields
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      - name: assertCollectionExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
      - name: assertIndexExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name
          index: __safeContent___1
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *esc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *ecoc_collection_name
      # ecc collection is no longer created for QEv2
      - name: assertCollectionNotExists
        object: "coll"
        arguments:
          database: *database_name
          collection: *encrypted_collection_name

    expectEvents:
      - client: "client0"
        events:
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
        # events from createCollection ... begin
          - commandStartedEvent:
              command:
                create: *esc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *ecoc_collection_name
                clusteredIndex: {key: {_id: 1}, unique: true}
              database_name: *database_name
              commandName: create
          - commandStartedEvent:
              command:
                create: *encrypted_collection_name
                encryptedFields: *encrypted_fields_expectation
              database_name: *database_name
              commandName: create
        # libmongocrypt requests listCollections to get a schema for the "createIndexes" command.
          - commandStartedEvent:
              command:
                listCollections: 1
                filter: {name: *encrypted_collection_name}
              database_name: *database_name
              commandName: listCollections
        # Index on __safeContents__ is then created.
          - commandStartedEvent:
              command:
                createIndexes: *encrypted_collection_name
                indexes:
                  - name: __safeContent___1
                    key: {__safeContent__: 1}
              database_name: *database_name
              commandName: createIndexes
        # events from createCollection ... end
        # events from dropCollection ... begin
          - commandStartedEvent:
              command:
                listCollections: 1
                filter: {name: *encrypted_collection_name}
              database_name: *database_name
              commandName: listCollections
          - commandStartedEvent:
              command:
                drop: *esc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *ecoc_collection_name
              database_name: *database_name
              commandName: drop
          - commandStartedEvent:
              command:
                drop: *encrypted_collection_name
              database_name: *database_name
              commandName: drop
        # events from dropCollection ... end
  - description: "encryptedFields are consulted for metadata collection names"

    operations:
      # Do an initial drop to remove collections that may exist from previous test runs.
      - name: dropCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
      - name: createCollection
        object: "coll"
        arguments:
          collection: *encrypted_collection_name
        expectError:
          # Expect error due to server constraints added in SERVER-74069
          errorContains: "Encrypted State Collection name should follow"
