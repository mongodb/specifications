description: createKey-kms_providers

schemaVersion: "1.8"

runOnRequirements:
  - csfle: true

createEntities:
  - client:
      id: &client0 client0
  - clientEncryption:
      id: &clientEncryption0 clientEncryption0
      clientEncryptionOpts:
        keyVaultClient: *client0
        keyVaultNamespace: keyvault.datakeys
        kmsProviders:
          aws: { accessKeyId: { $$placeholder: 1 }, secretAccessKey: { $$placeholder: 1 } }
          azure: { tenantId: { $$placeholder: 1 }, clientId: { $$placeholder: 1 }, clientSecret: { $$placeholder: 1 } }
          gcp: { email: { $$placeholder: 1 }, privateKey: { $$placeholder: 1 } }
          kmip: { endpoint: { $$placeholder: 1 } }
          local: { key: { $$placeholder: 1 } }
  - database:
      id: &database0 database0
      client: *client0
      databaseName: &database0Name keyvault
  - collection:
      id: &collection0 collection0
      database: *database0
      collectionName: &collection0Name datakeys

initialData:
  - databaseName: *database0Name
    collectionName: *collection0Name
    documents: []

tests:
  - description: create data key with AWS KMS provider
    operations:
      - name: createKey
        object: *clientEncryption0
        arguments:
          kmsProvider: aws
          opts:
            masterKey: &new_aws_masterkey
              key: arn:aws:kms:us-east-1:579766882180:key/89fcc2c4-08b0-4bd9-9f25-e30687b580d0
              region: us-east-1
        expectResult: { $$type: binData }
      - name: find
        object: *collection0
        arguments:
          filter: {}
          projection: { _id: 0, masterKey: 1 }
        expectResult:
          - masterKey:
              provider: aws
              <<: *new_aws_masterkey

  - description: create datakey with Azure KMS provider
    operations:
      - name: createKey
        object: *clientEncryption0
        arguments:
          kmsProvider: azure
          opts:
            masterKey: &new_azure_masterkey
              keyVaultEndpoint: key-vault-csfle.vault.azure.net
              keyName: key-name-csfle
        expectResult: { $$type: binData }
      - name: find
        object: *collection0
        arguments:
          filter: {}
          projection: { _id: 0, masterKey: 1 }
        expectResult:
          - masterKey:
              provider: azure
              <<: *new_azure_masterkey

  - description: create datakey with GCP KMS provider
    operations:
      - name: createKey
        object: *clientEncryption0
        arguments:
          kmsProvider: gcp
          opts:
            masterKey: &new_gcp_masterkey
              projectId: devprod-drivers
              location: global
              keyRing: key-ring-csfle
              keyName: key-name-csfle
        expectResult: { $$type: binData }
      - name: find
        object: *collection0
        arguments:
          filter: {}
          projection: { _id: 0, masterKey: 1 }
        expectResult:
          - masterKey:
              provider: gcp
              <<: *new_gcp_masterkey

  - description: create datakey with KMIP KMS provider
    operations:
      - name: createKey
        object: *clientEncryption0
        arguments:
          kmsProvider: kmip
        expectResult: { $$type: binData }
      - name: find
        object: *collection0
        arguments:
          filter: {}
          projection: { _id: 0, masterKey: 1 }
        expectResult:
          - masterKey:
              provider: kmip
              keyId: { $$type: string }

  - description: create datakey with local KMS provider
    operations:
      - name: createKey
        object: *clientEncryption0
        arguments:
          kmsProvider: local
        expectResult: { $$type: binData }
      - name: find
        object: *collection0
        arguments:
          filter: {}
          projection: { _id: 0, masterKey: 1 }
        expectResult:
          - masterKey:
              provider: local
