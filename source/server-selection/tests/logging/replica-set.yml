description: "replica-set-logging"

schemaVersion: "1.13"

runOnRequirements:
  - topologies:
    - replicaset

createEntities:
  - client:
      id: &client client
      uriOptions:
        retryWrites: false  # so we don't retry after hitting a failpoint
        heartbeatFrequencyMS: 500
        serverSelectionTimeoutMS: 2000 # avoid hanging for 30s in test expecting SS failure due to timeout
      observeLogMessages:
        serverSelection: debug
      observeEvents:
        - serverDescriptionChangedEvent
  - database:
      id: &database database
      client: *client
      databaseName: &databaseName logging-tests
  - collection:
      id: &collection collection
      database: *database
      collectionName: &collectionName server-selection
  - client:
      id: &failPointClient failPointClient
  - collection:
      id: &unsatisfiableRPColl unsatisfiableRPColl
      database: *database
      collectionName: &unsatisfiableRPColl unsatisfiableRPColl
      collectionOptions:
        readPreference:
          mode: Secondary
          tagSets:
            - { nonexistenttag : a }

# NOTE: These tests are written to match the drivers-evergreen-tools mongo-orchestration
# replica set configs, which have one primary, one secondary, and an arbiter. This
# test will fail against a replica set with any other configuration (e.g. no arbiter).
tests:
  - description: "A successful operation"
    operations:
      # ensure we've discovered the entire topology before starting.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSPrimary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSSecondary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSArbiter
          count: 1
      - name: insertOne
        object: *collection
        arguments:
          document: { x : 1 }
    expectLogMessages:
      - client: *client
        messages:
          - level: debug
            component: serverSelection
            data:
              message: "Server selection started"
              selector: { $$exists: true }
              operation: insert
              topologyDescription: { $$exists: true } 
          - level: debug
            component: serverSelection
            data:
              message: "Server selection succeeded"
              selector: { $$exists: true }
              operation: insert
              topologyDescription: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }

  - description: "Server selection fails due to unsatisfiable read preference"
    runOnRequirements:
      - minServerVersion: "4.0" # min version for failCommand on mongod
    operations:
      # ensure we've discovered the entire topology before starting.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSPrimary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSSecondary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSArbiter
          count: 1
      # the `find` should never succeed due to the unsatisfiable read preference.
      - name: find
        object: *unsatisfiableRPColl
        arguments:
          filter: { x : 1 }
        expectError:
          isClientError: true # server selection error
    expectLogMessages:
      # the topology won't change during this time, so although we exhaust
      # serverSelectionTimeoutMS we only expect a single message.
      - client: *client
        messages:
          - level: debug
            component: serverSelection
            data:
              message: "Server selection started"
              selector: { $$exists: true }
              operation: find
              topologyDescription: { $$exists: true } 
          - level: info
            component: serverSelection
            data:
              message: "Waiting for suitable server to become available"
              selector: { $$exists: true }
              operation: find
              topologyDescription: { $$exists: true } 
              remainingTimeMS: { $$type: [int, long] }
          - level: debug
            component: serverSelection
            data:
              message: "Server selection failed"
              selector: { $$exists: true }
              operation: find
              topologyDescription: { $$exists: true }
              failure: { $$exists: true }

  - description: "Waiting message is logged when a suitable server is not immediately available"
    runOnRequirements:
      - minServerVersion: "4.0" # min version for failCommand on mongod
    operations:
      # ensure we've discovered the entire topology before starting.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSPrimary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSSecondary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSArbiter
          count: 1
      # set a failPoint and run insert so that we mark the primary as unknown
      - name: failPoint
        object: testRunner
        arguments:
          client: *failPointClient
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands: ["insert"]
              closeConnection: true
      - name: insertOne
        object: *collection
        arguments:
          document: { x : 1 }
        expectError:
          isClientError: true # network error
      # wait for the primary to be marked unknown
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: Unknown
          count: 1
      # perform another write to rediscover the primary. this should lead
      # to a log message because no suitable server will be available until we
      # request an immediate check which rediscovers it.
      - name: updateOne
        object: *collection
        arguments:
          filter: { x: 1 }
          update: { $set: { y : 1 } }
    expectLogMessages:
      - client: *client
        messages:
          - level: debug
            component: serverSelection
            data:
              message: "Server selection started"
              selector: { $$exists: true }
              operation: insert
              topologyDescription: { $$exists: true }
          - level: debug
            component: serverSelection
            data:
              message: "Server selection succeeded"
              selector: { $$exists: true }
              operation: insert
              topologyDescription: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
          - level: debug
            component: serverSelection
            data:
              message: "Server selection started"
              selector: { $$exists: true }
              operation: update
              topologyDescription: { $$exists: true } 
          - level: info
            component: serverSelection
            data:
              message: "Waiting for suitable server to become available"
              selector: { $$exists: true }
              operation: update
              topologyDescription: { $$exists: true } 
              remainingTimeMS: { $$type: [int, long] }
          - level: debug
            component: serverSelection
            data:
              message: "Server selection succeeded"
              selector: { $$exists: true }
              operation: update
              topologyDescription: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }

  - description: "Waiting message is re-logged if topology changes but still contains no suitable server"
    runOnRequirements:
      - minServerVersion: "4.0" # min version for failCommand on mongod
    operations:
      # ensure we've discovered the entire topology before starting.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSPrimary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSSecondary
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: RSArbiter
          count: 1
      # set a failPoint and run insert so that we mark the primary as unknown
      - name: failPoint
        object: testRunner
        arguments:
          client: *failPointClient
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
              failCommands: ["insert"]
              closeConnection: true
      - name: insertOne
        object: *collection
        arguments:
          document: { x : 1 }
        expectError:
          isClientError: true # network error
      # wait for the primary to be marked unknown.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              previousDescription:
                type: RSPrimary
              newDescription:
                type: Unknown
          count: 1
      # the `find` should never succeed due to the unsatisfiable read preference.
      - name: find
        object: *unsatisfiableRPColl
        arguments:
          filter: { x : 1 }
        expectError:
          isClientError: true # server selection error
      # we should have rediscovered the primary.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              previousDescription:
                type: Unknown
              newDescription:
                type: RSPrimary
          count: 1
    expectLogMessages:
      - client: *client
        messages:
          - level: debug
            component: serverSelection
            data:
              message: "Server selection started"
              selector: { $$exists: true }
              operation: insert
              topologyDescription: { $$exists: true }
          - level: debug
            component: serverSelection
            data:
              message: "Server selection succeeded"
              selector: { $$exists: true }
              operation: insert
              topologyDescription: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
          - level: debug
            component: serverSelection
            data:
              message: "Server selection started"
              selector: { $$exists: true }
              operation: find
              topologyDescription: { $$exists: true } 
          # initial "waiting" message when we first attempt the find.
          - level: info
            component: serverSelection
            data:
              message: "Waiting for suitable server to become available"
              selector: { $$exists: true }
              operation: find
              topologyDescription: { $$exists: true } 
              remainingTimeMS: { $$type: [int, long] }
          # new "waiting" message when the topology changes because primary was rediscovered.
          - level: info
            component: serverSelection
            data:
              message: "Waiting for suitable server to become available"
              selector: { $$exists: true }
              operation: find
              topologyDescription: { $$exists: true } 
              remainingTimeMS: { $$type: [int, long] }
          # no suitable server will ever be found so SS will time out. 
          - level: debug
            component: serverSelection
            data:
              message: "Server selection failed"
              selector: { $$exists: true }
              operation: find
              topologyDescription: { $$exists: true }
              failure: { $$exists: true }
