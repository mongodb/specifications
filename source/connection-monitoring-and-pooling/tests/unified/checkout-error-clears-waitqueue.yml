---
description: checkout-error-clears-waitqueue

schemaVersion: "1.10"

createEntities:
  - client:
      id: &setupClient setupClient
      useMultipleMongoses: false

initialData: &initialData
  - collectionName: &collectionName cmap-network-error
    databaseName: &databaseName cmap-tests
    documents:
      - _id: 1
      - _id: 2

tests:
  - description: Connection error during checkout clears WaitQueue
    runOnRequirements:
      # failCommand appName requirements
      - minServerVersion: "4.4"
        serverless: forbid
        topologies: [ single, replicaset, sharded ]
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - connectionCreatedEvent
                  - connectionCheckedOutEvent
                  - connectionCheckOutFailedEvent
                  - connectionCheckedInEvent
                  - poolClearedEvent
                uriOptions:
                  retryWrites: false
                  retryReads: false
                  appname: &appName "poolCheckOutErrorWaitQueueTest"
                  serverSelectionTimeoutMS: 100
                  waitQueueTimeoutMS: 30000
                  directConnection: true
                  maxPoolSize: 1
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - thread:
                id: &thread0 thread0
            - thread:
                id: &thread1 thread1
            - thread:
                id: &thread2 thread2
      # wait for the server to be discovered before enabling the failpoint
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            poolReadyEvent: {}
          count: 1
      - name: failPoint
        object: testRunner
        arguments:
          client: *setupClient
          failPoint:
            configureFailPoint: failCommand
            # high amount to ensure not interfered with by monitor checks.
            mode: { times: 50 }
            data:
              failCommands: ["hello", "isMaster"]
              appName: *appName
              closeConnection: true
              blockConnection: true
              blockTimeMS: 1000
      # Start three concurrent checkOut attempts.
      # Since maxPoolSize=1 and hello will block for a while, two of the threads will enter the WaitQueue.
      # Once the checkOut finally fails, the pool will be cleared and the two other threads will be evicted from the
      # WaitQueue without ever having attempted to create a connection.
      - name: runOnThread
        object: testRunner
        arguments:
          thread: *thread0
          operation:
            name: find
            object: *collection
            arguments:
              filter:
                _id: 1
            expectError:
              isError: true
      - name: runOnThread
        object: testRunner
        arguments:
          thread: *thread1
          operation:
            name: find
            object: *collection
            arguments:
              filter:
                _id: 1
            expectError:
              isError: true
      - name: runOnThread
        object: testRunner
        arguments:
          thread: *thread2
          operation:
            name: find
            object: *collection
            arguments:
              filter:
                _id: 1
            expectError:
              isError: true
      - name: waitForThread
        object: testRunner
        arguments:
          thread: *thread0
      - name: waitForThread
        object: testRunner
        arguments:
          thread: *thread1
      - name: waitForThread
        object: testRunner
        arguments:
          thread: *thread2
      - name: assertEventCount
        object: testRunner
        arguments:
          client: *client
          event:
            connectionClosedEvent: {}
          count: 1
    expectEvents:
      - client: *client
        eventType: cmap
        events:
          # Only one ConnectionCreatedEvent should be emitted, since the other threads should be evicted by
          # the pool clear without ever attempting to create a connection.
          - connectionCreatedEvent: {}
          - poolClearedEvent: {}
          - connectionCheckOutFailedEvent:
              reason: connectionError
          - connectionCheckOutFailedEvent:
              reason: connectionError
          - connectionCheckOutFailedEvent:
              reason: connectionError

    outcome:
      - collectionName: *collectionName
        databaseName: *databaseName
        documents:
          - _id: 1
          - _id: 2
